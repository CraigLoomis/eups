#!/usr/bin/env python
import os, re, sys
import neups as eups
import eupsGetopt

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Deal with arguments
#
debugFlag = "-\001"

options = {
    "-F" : (False, "--force", "Force requested behaviour"),
    "-f" : (True,  "--flavor", "Use this flavor. Default: $EUPS_FLAVOR or `eups_flavor`"),
    "-h" : (False, "--help", "Print this help message"),
    "-i" : (False, "--ignore-versions", "Ignore any explicit versions in table files"),
    "-j" : (False, "--just", "Just setup product, no dependencies (equivalent to --max-depth 0)"),
    "-l" : (False, "--list", "List available versions; not supported --- use \"eups list\""),
    "-k" : (False, "--keep", "Keep any products with local setups (i.e. not in EUPS_PATH)"),
    "-n" : (False, "--noaction", "Don\'t actually do anything"),
    "-N" : (False, "--noCheck", "Don't check whether recursively removed products are needed"),
    "-q" : (False, "--quiet", "Be extra quiet"),
    "-r" : (True,  "--root", "Location of product being setup"),
    "-S" : (True,  "--max-depth", "Only show this many levels of dependencies (use with -v)"),
    "-t" : (True,  "--type", "Specify type of setup (permitted values: build)"),
    "-u" : (False, "--unsetup", "Unsetup the specified product"),
    "-V" : (False, "--version", "Print eups version number and exit"),
    "-v" : (False, "--verbose", "Be chattier (repeat for even more chat)"),
    "-Z" : (True,  "--database", "Use this products path. Default: $EUPS_PATH"),
    "-z" : (True,  "--select-db", "Select the product paths which contain this directory.\nDefault: all"),
    debugFlag : (True,  "--debug", "Permitted Values: raise"),
    }
aliases = {}

try:
    opts = eupsGetopt.Getopt(options, sys.argv, aliases, "setup [options] [product [version]]")
except RuntimeError, param:
    print >> sys.stderr, "Error parsing arguments: %s" % param
    sys.exit(1)

if opts.options.get('-h'):
    print >> sys.stderr, "Setup an eups product"
    opts.usage()
    sys.exit(0)

if opts.options.get('-l'):
    print >> sys.stderr, "setup --list is no longer supported; use \"eups list\""
    sys.exit(1)
if opts.options.get('-V'):
    print >> sys.stderr, "Version: %s" % eups.version()
    sys.exit(0)    

debugOptions = opts.options.get(debugFlag, "").split(":")
if debugOptions:
    allowRaise = "raise" in debugOptions
dbz = opts.options.get('-z')
flavor = opts.options.get('-f', eups.flavor())
force = opts.options.get('-F', False)
ignore_versions = opts.options.get("-i", False)
just = opts.options.get("-j", False)
keep = opts.options.get("-k", False)
max_depth = int(opts.options.get("-S", -1))
noaction = opts.options.get('-n')
path = opts.options.get('-Z')
root = opts.options.get('-r')
unsetup = opts.options.get('-u', False)
verbose = opts.options.get('-v', 0)

productName = None
if opts.argv:
    productName = opts.argv.pop(0)

if root:
    try:
        productName = eups.guessProduct(os.path.join(root, "ups"), productName)
    except RuntimeError, e:
        print >> sys.stderr, e
        sys.exit(1)

if opts.argv:
    version = opts.argv.pop(0)
else:
    version = eups.Current

if opts.argv:
    pass

if not productName:
    print >> sys.stderr, "Please specify a product"
    opts.usage()
    sys.exit(1)

if max_depth > 0 and just:
    print >> sys.stderr, "You may not specify both --just and --max_depth"    
    sys.exit(1)
#
# Do the work
#
try:
    Eups = eups.Eups(flavor=flavor, path=path, dbz=dbz, root=root, readCache=False, force=force,
                     verbose=verbose, noaction=noaction, keep=keep, ignore_versions=ignore_versions,
                     max_depth=max_depth)
                          
    tmpfile = eups.setup(Eups, productName, version, fwd=not unsetup)
except RuntimeError, e:
    print >> sys.stderr, e
    if allowRaise:
        raise
    sys.exit(1)

if tmpfile:
    if Eups.shell == "sh":
        print ". %s" % tmpfile
    else:
        print "source %s" % tmpfile
else:
    if Eups.shell == "sh":
        print ":"
    else:
        print "#"
        
