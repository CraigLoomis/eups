#!/usr/bin/env python
#
import os, sys

sys.argv.pop(0)                         # remove script name
try:
    eupsdir = sys.argv.pop(0)
    prefix = sys.argv.pop(0)
except IndexError:
    print >> sys.stderr, "Usage: mksetup EUPS_DIR EUPS_PATH [SETUP_ALIASES]"

    sys.exit(1)

try:
    vals = sys.argv.pop(0).split(":")
    setup_aliases = {"setup" : vals[0], "unsetup" : vals[1]}
except IndexError:
    setup_aliases = {}

ups_db = os.path.join(prefix, "ups_db")

bindir = os.path.join("$EUPS_DIR","bin")
setup = os.path.join('$EUPS_DIR',"bin","eups_setup");

# Create a script for normalizing the EUPS_PATH
try:
    fd = open("uniquify_path.py", "w")
    try:
        print >> fd, """#! /usr/bin/env python
import sys
pp = []
for d in sys.argv[1].split(":"):
    if d and d not in pp:
        pp += [d]
print ":".join(pp)"""

    finally:
        fd.close()
except IOError, e:
    print >> sys.stderr, "Unable to write uniquify_path.py: %s" % e
    sys.exit(1)

print "Writing a csh startup script";
try:
    fd = open("setups.csh", "w")
except IOError, e:
    print >> sys.stderr, "Unable to open setups.csh: %s" % e
    sys.exit(1)

print >> fd, """
if ("$?EUPS_DIR" == "1" ) then
   setenv PATH `echo $PATH | perl -pe "s|:%(bindir)s||g"`
   if ("$?PYTHONPATH" == "1" ) then
      setenv PYTHONPATH `echo $PYTHONPATH | perl -pe "s|:%(bindir)s||g"`
   endif
endif

setenv EUPS_DIR %(eupsdir)s
if ("$?EUPS_PATH" == "0" ) then
    setenv EUPS_PATH ""
endif

# Set EUPS_PATH, appending any pre-existing EUPS_PATH (and only keeping
# one copy of each directory)
setenv EUPS_PATH `python $EUPS_DIR/bin/uniquify_path.py %(prefix)s:$EUPS_PATH`
# Set SETUP_EUPS so that a "setup eups" will remove this EUPS_DIR/bin from PATH
setenv SETUP_EUPS "eups"
# Deprecated variables
unsetenv PROD_DIR_PREFIX
unsetenv PRODUCTS

setenv PATH ${PATH}:%(bindir)s
if ("$?PYTHONPATH" == "1" ) then
   setenv PYTHONPATH ${PYTHONPATH}:%(bindir)s
else
   setenv PYTHONPATH %(bindir)s
endif

alias setup 'eval `%(setup)s \\!*`'
alias unsetup 'eval `%(setup)s --unsetup \\!*`'

""" % {"bindir" : bindir, "eupsdir" : eupsdir, "prefix" : prefix, \
       "setup" : setup}

for s in setup_aliases.keys():
    print >> fd, "alias %s %s" % (setup_aliases[s], s)

del fd

print "Writing a sh startup script";
try:
    fd = open("setups.sh", "w")
except IOError, e:
    print >> sys.stderr, "Unable to open setups.sh: %s" % e
    sys.exit(1)

print >> fd, """
if [ "$EUPS_DIR" != "" ]; then
   PATH=`echo $PATH | perl -pe "s|:%(bindir)s||g"`
   PYTHONPATH=`echo $PYTHONPATH | perl -pe "s|:%(bindir)s||g"`
fi

export EUPS_DIR=%(eupsdir)s
# Set EUPS_PATH, appending any pre-existing EUPS_PATH (and only keeping
# one copy of each directory)
export EUPS_PATH=`python $EUPS_DIR/bin/uniquify_path.py %(prefix)s:$EUPS_PATH`
# Set SETUP_EUPS so that a "setup eups" will remove this EUPS_DIR/bin from PATH
export SETUP_EUPS="eups"
# Deprecated variables
unset PROD_DIR_PREFIX
unset PRODUCTS

export PATH="$PATH:%(bindir)s"
if [ X"$PYTHONPATH" != X"" ]; then
    export PYTHONPATH="$PYTHONPATH:%(bindir)s"
else
    export PYTHONPATH="%(bindir)s"
fi

function setup   { eval `%(setup)s           $@`; }; export -f setup
function unsetup { eval `%(setup)s --unsetup $@`; }; export -f unsetup""" \
    % {"bindir" : bindir, "eupsdir" : eupsdir, "prefix" : prefix, \
       "setup" : setup }

for s in setup_aliases.keys():
    print >> fd, "alias %s=%s" % (setup_aliases[s], s)

del fd

sys.exit(0)
