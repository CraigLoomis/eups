#!/usr/bin/env python
#
# The main eups programme
#
import os, re, sys
import tempfile
import eups
import eupsDistrib
import eupsDistribBuilder
import eupsDistribPacman
import eupsDistribTarball
import eupsGetopt
import eupsTable

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Deal with arguments
#
# Flags that don't really have short forms are specified with non-printable options
#
debugFlag = "-\001"
allowedDebugOptions = ["raise"]

options = {
    "-F" : (False, "--force", "Force requested behaviour"),
    "-f" : (True,  "--flavor", "Use this flavor. Default: $EUPS_FLAVOR or `eups flavor`"),
    "-h" : (False, "--help", "Print this help message"),
    "-n" : (False, "--noaction", "Don\'t actually do anything"),
    "-V" : (False, "--version", "Print eups version number and exit"),
    "-v" : (False, "--verbose", "Be chattier (repeat for even more chat)"),
    "-Z" : (True,  "--database", "Use this products path. Default: $EUPS_PATH"),
    "-z" : (True,  "--select-db", "Select the product paths which contain this directory.\nDefault: all"),
    debugFlag : (True,  "--debug", "Permitted Values: %s" % " ".join(allowedDebugOptions)),
    }
aliases = {
    "-Z" : "--with-eups",
    }

helpStr = """	eups [--help|--version] command [options]
Supported commands are:
	admin		Administer the eups system
	declare		Declare a product
	distrib		Install a product from a remote distribution,
			or create such a distribution 
	expandbuild	Expand variables in a build file
	expandtable	Insert explicit version tags into a table file
	flags		Show the value of \$EUPS_FLAGS
	flavor		Return the current flavor
	list            List some or all products
        path [n]        Print the current eups path, or an element thereof
	pkg-config	Return the options associated with product
	remove          Remove an eups product from the system
	undeclare	Undeclare a product
        uses            List everything which depends on the specified product and version
Use
	eups --help cmd
for help with command "cmd"
"""
#
# Start by looking for our command
#
try:
    opts = eupsGetopt.Getopt(options, sys.argv[:], aliases, helpStr, checkArgs=False)
except RuntimeError, param:
    print >> sys.stderr, "Error parsing arguments: %s" % param
    sys.exit(1)
try:
    cmd = opts.argv[0]
except IndexError:
    cmd = None
#
# Choose arguments based on cmd
#
helpStr = "eups [commonOpts]"
if cmd:
    helpStr += " %s" % (cmd)
else:
    helpStr += " cmd"
helpStr += " [opts]"

if cmd == "admin":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, "buildCache | clearCache | listCache | clearLocks")
elif cmd == "declare":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, ["product", "version"])
    helpStr += "\n\nDeclare a product"

    options["-c"] = (False,  "--current", "Declare product current")
    options["-m"] = (True,  "--table", "Use table file (may be \"none\") Default: product.table")
    options["-M"] = (True,  None,
                     "Import the given table file directly into the database\n(may be \"-\" for stdin)")
    options["-r"] = (True,  "--root", "Location of product being declared")
elif cmd == "distrib":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, None, ["product", "version"])

    installFlavorFlag = "-\002"
    tarballFlag = "-\003"
    options["-b"] = (False, "--prefer-flavor", "Prefer distributions that are flavor-specific")
    options["-B"] = (True,  "--build", "Search for build files on this :-separated path\n(@ -> product's installed ups directory)")
    options["-C"] = (False, "--current", "Create a list of current versions which -i can use")
    options["-c"] = (False, "--create", "Create a package for distribution")
    options["-g"] = (True,  "--groupAccess", "Give specified group r/w access to all built packages")
    options["-i"] = (False, "--install", "Extract and install the specified package")
    options["-j"] = (False, "--nodepend", "Just install product, but not its dependencies")
    options["-l"] = (False, "--list", "List available products")
    options["-N"] = (False, "--noeups", "Don\'t attempt to lookup product in eups")
    options["-p"] = (True,  "--pacman", "Use this pacman cache to install packages")
    options["-r"] = (True,  "--root", "Location of manifests/buildfiles/tarballs (may be a URL or scp specification).\nDefault: $EUPS_PKGROOT")
    options["-t"] = (True,  "--prefer-tag", "Prefer distributions that are tagged with this tag")
    options["-T"] = (True,  "--tmp-dir", "Build products in this directory (when --build is specified)")
    options[installFlavorFlag] = \
                               (True, "--install-flavor", "Create a distribution for this flavor (useful with --build)")
    options[tarballFlag] = (False, "--tarball", "Create a distribution with tarballs")
    
    aliases["-i"] = "--extract"
elif cmd == "expandbuild":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, "buildFile", "outDir")

    helpStr += """\n
    Expand a .build file as part of installing it.

    If outDir is provided, the expanded file will be written there;
    otherwise it'll be written to stdout unless you specify --inplace."""

    options["-c"] = (True, '--cvs', "Use this CVSROOT")
    options["-i"] = (False, "--inplace", "Modify file in situ")
    options["-p"] = (True, '--product', "The name of the product")
    options["-s"] = (True, '--svn', "Use this SVNROOT")
    options["-V"] = (True, "--version", "Specify version that you're installing")

    aliases["-c"] = "--cvsroot"
    aliases["-s"] = "--svnroot"
elif cmd == "expandtable":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, "tableFile", "outDir")

    helpStr += """\n
Modify a ups table file, replacing setupRequired and setupOptional
lines which refer to the current version by the actual version number 
of the currently setup product; e.g.
      setupRequired(astroda)
becomes
      setupRequired(astroda v13_1)

You can override the version with e.g. -p astroda=rhl; more
than one -p command is permitted.

If a directory is specified, the modified table file will be written
there, with the same name as the original; otherwise it is written to
standard out unless you specify --inplace, in which case the
substitution will be done in situ.  You may omit file.table, or
specify it as "-", to read standard input; this implies --inplace.
    
For example, the make target in a ups directory might contain the line:
      eups expandtable -w iop.table $(IOP_DIR)/ups
    
    """

    options["-i"] = (False, "--inplace", "Modify file in situ")
    options["-p"] = (True, '--product', "The version of the product")
    options["-w"] = (False, "--warn", "Warn about versions with non-canonical names")
    options["-W"] = (True, "--warnRegexp", "Canonical versions should match this regexp (implies --warn)")
elif cmd == "flags":
    helpStr, narg = eupsGetopt.declareArgs(helpStr)
    helpStr += "\n\nPrint the value of EUPS_FLAGS"
elif cmd == "flavor":
    helpStr, narg = eupsGetopt.declareArgs(helpStr)
    helpStr += "\n\nPrint your eups flavor"
elif cmd == "list":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, None, ["product", "version"])
    helpStr += "\n\nPrint information about products"

    options["-c"] = (False,  "--current", "Only show current products")
    options["-d"] = (False,  "--directory", "Print product directory (useful with -s)")
    options["-m"] = (False,  "--table", "Print name of table file")
    options["-s"] = (False,  "--setup", "Only show setup products")
elif cmd == "path":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, None, "index")
    helpStr += "\n\nPrint the eups path; with index print just one element (-ve: from end)"
elif cmd == "pkg-config":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, ["product"], ["version"])
    helpStr += "\n\nPrint information about products"

    options["-c"] = (False, "--cflags", "Output all pre-processor and compiler flags")
    options["-l"] = (False,  "--libs", "Output all linker flags")
elif cmd == "remove":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, None, ["product", "version"])
    helpStr += "\n\nRemove a product"

    noInteractiveFlag = "-\002"
    options["-i"] = (False, "--interactive", "Prompt user before actually removing products (default if -R)")
    options[noInteractiveFlag] = (False, "--noInteractive", "Don't prompt user before actually removing products")
    options["-N"] = (False, "--noCheck", "Don't check whether recursively removed products are needed")
    options["-R"] = (False, "--recursive", "Recursively also remove everything that this product depends on")
elif cmd == "setup" or cmd == "unsetup":
    print >> sys.stderr, "Please use the command %s (not \"eups %s\") as you need to modify your environment" % \
          (cmd, cmd)
    sys.exit(1)
elif cmd == "undeclare":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, ["product", "version"])
    helpStr += "\n\nUndeclare a product"

    options["-c"] = (False,  "--current", "Stop version from being current")
elif cmd == "uses":
    helpStr, narg = eupsGetopt.declareArgs(helpStr, ["product"], ["version"])
    helpStr += "\n\nShow which products setup the specified product (and maybe version of that product)"

    options["-c"] = (False, "--current", "Look for products that setup current version")
    options["-d"] = (True,  "--depth", "Only search down this many layers of dependency")
    options["-o"] = (False, "--optional", "Show optional setups")
else:
    print >> sys.stderr, "Unknown command %s (use --help to list your options)" % cmd
    sys.exit(1)
#
# Parse arguments
#
helpStr += "\n"
try:
    opts = eupsGetopt.Getopt(options, sys.argv, aliases, helpStr, extras=os.environ.get("EUPS_FLAGS"))
except RuntimeError, param:
    print >> sys.stderr, "Error parsing arguments: %s" % param
    sys.exit(1)

if opts.argv:                           # we already found cmd
    opts.argv.pop(0)

if opts.options.get('-V'):
    if cmd == "expandbuild":
        pass                            # Uh-oh.  --version is used to specify versions to expandbuild
    else:
        print >> sys.stderr, "Version: %s" % eups.version()
        sys.exit(0)    

if opts.options.get('-h') or not cmd:
    opts.usage()
    sys.exit(0)

debugOptions = opts.options.get(debugFlag, "").split(":")
for bad in filter(lambda o: o not in [""] + allowedDebugOptions, debugOptions):
    print >> sys.stderr, "%s in not a valid option to --debug" % bad
allowRaise = "raise" in debugOptions

dbz = opts.options.get('-z')
flavor = opts.options.get('-f', eups.flavor())
force = opts.options.get('-F', False)
noaction = opts.options.get('-n')
path = opts.options.get('-Z')
verbose = opts.options.get('-v')

if not (narg[0] <= len(opts.argv) <= narg[1]):
    if narg[0] == narg[1]:
        print >> sys.stderr, "Expected %d arguments, saw %d" % (narg[0], len(opts.argv))
    else:
        print >> sys.stderr, "Expected %d--%d arguments, saw %d" % (narg[0], narg[1], len(opts.argv))
    opts.usage()
    sys.exit(1)
#
# Do the work
#
if not cmd:
    usage()
    sys.exit(1)
#
# Do the work
#
def main(cmd, opts):
    if cmd in ["admin", "flavor", "flags", "path"]:
        readCache = False
    else:
        readCache = True
        
    Eups = eups.Eups(flavor=flavor, path=path, dbz=dbz, readCache=readCache, force=force,
                     verbose=verbose, noaction=noaction)

    if cmd == "admin":
        if opts.argv:
            subcmd = opts.argv.pop(0)            
        else:
            subcmd = None

        eupsAdmin(Eups, subcmd)
    elif cmd == "declare":
        declare_current = opts.options.get('-c', False)
        productDir = opts.options.get('-r', None)
        tablefile = opts.options.get('-m', None)
        externalTablefile = opts.options.get('-M', None)

        productName, versionName = opts.argv[0:2]

        if tablefile and externalTablefile:
            print >> sys.stderr, "You may not specify both -m and -M"
            sys.exit(1)

        if externalTablefile:
            if externalTablefile == "-":
                tablefile = sys.stdin
            else:
                try:
                    tablefile = open(externalTablefile, "r");
                except IOError, e:
                    print >> sys.stderr, ("Error opening %s: %s" % (externalTablefile, e))
                    sys.exit(1)

        Eups.declare(productName, versionName, productDir=productDir, tablefile=tablefile,
                     declare_current=declare_current)
    elif cmd == "distrib":
        buildFilePath = opts.options.get('-B', None)
        preferFlavor = opts.options.get('-b', False)
        current = opts.options.get('-C', False)
        create = opts.options.get('-c', False)
        obeyGroups = opts.options.get('-g', None)
        no_dependencies = opts.options.get('-j', False)
        install = opts.options.get('-i', False)
        list = opts.options.get('-l', False)
        manifest = opts.options.get('-m', None)
        noeups = opts.options.get('-N', False)
        pacmanCache = opts.options.get('-p', None) # use this pacman cache to install packages?
        tarball = opts.options.get(tarballFlag, False) # use tarballs to install packages?

        if list and Eups.noaction:
            print >> sys.stderr, "You may not specify --list along with --noaction"
            sys.exit(1)

        transport = eupsDistrib.LOCAL
        packageBase = opts.options.get('-r', None)
        if not packageBase and os.environ.has_key("EUPS_PKGROOT"):
            packageBase = os.environ["EUPS_PKGROOT"];

        tag = opts.options.get('-t', None)
        installFlavor = opts.options.get(installFlavorFlag, flavor)
        tmp_dir = opts.options.get('-T', None)

        if packageBase is not None:
            if (install or list) and re.search(r"^http://", packageBase):
                transport = eupsDistrib.URL
            elif (install or list) and re.search(r"^scp:", packageBase):
                transport = eupsDistrib.SCP
                packageBase = re.sub(r"^scp:", "", packageBase)
        try:
            productName = opts.argv[0]
        except IndexError:
            if current:
                productName = ""
            elif list:
                productName = None
            elif manifest == None:
                print >> sys.stderr, "Please specify a product\n"
                opts.usage()
                sys.exit(1)

        try:
            versionName = opts.argv[1]
        except IndexError:
            versionName = ""

        if create + install + list != 1:
            print >> sys.stderr, "Please specify exactly one of --create, --install, and --list"
            sys.exit(1)

        if create:
            desire = "create"
        elif install:
            desire = "install"
        elif list:
            desire = "list"
        else:
            raise AssertionError, "You can't get here"
        #
        # Check that eups is installed in that db
        #
        packageBasePath = []
        if packageBase:
            packageBasePath += [packageBase]
        else:
            for eupsPathDir in Eups.path:
                ups_db = Eups.getUpsDB(eupsPathDir)

                if not os.path.isdir(ups_db):
                    raise RuntimeError, ("Products database %s doesn't exist; please install eups" % ups_db)

                packageBasePath += [os.path.join(eupsPathDir, "packages", installFlavor)]
        #
        # Pack options into a class
        #
        if pacmanCache:
            Distrib = eupsDistribPacman.Distrib
        elif tarball:
            Distrib = eupsDistribTarball.Distrib
        else:
            Distrib = eupsDistribBuilder.Distrib

        Distrib = Distrib(Eups, packageBasePath, transport, buildFilePath=buildFilePath,
                          current=current, obeyGroups=obeyGroups,
                          tag=tag, preferFlavor=preferFlavor, no_dependencies=no_dependencies,
                          noeups=noeups)
        #
        # Some sorts of Distribs need extra capabilities
        #
        if pacmanCache:
            Distrib.pacmanCache = pacmanCache
        elif tarball:
            pass
        else:
            Distrib.buildDir=tmp_dir

        distrib(Distrib, desire, productName, versionName, manifest=manifest, current=current)
    elif cmd in ("expandbuild", "expandtable"):
        productList = {}
        if cmd == "expandbuild":
            fileType = "build"

            cvsroot = opts.options.get('-c', None)
            productName = opts.options.get('-p', "")
            svnroot = opts.options.get('-s', None)
            versionName = opts.options.get('-V')
            if not versionName:
                print >> sys.stderr, "Please specify a version with --version or -V"
                sys.exit(1)

            productList[productName] = versionName
        elif cmd == "expandtable":
            fileType = "table"

            productVersionPair = opts.options.get('-p', None)
            if productVersionPair:
                for pv in productVersionPair.split(":"):
                    p, v = pv.split("=")
                    productList[p] = v
            
            warn = opts.options.get('-w', False)
            warnRegexp = opts.options.get('-W', None)

            if warn and not warnRegexp:
                warnRegexp = "^[vV]"
        else:
            raise AssertionError, "Impossible expansion command: %s" % cmd
        
        in_situ = opts.options.get('-i', False)
        inFile = opts.argv.pop(0)

        if len(opts.argv) == 0:
            outdir = None
        else:
            if in_situ:
                print >> sys.stderr, "You may not specify both --inplace and a target directory"
                sys.exit(1);

            outdir = opts.argv.pop(0)

        if fileType == "build":
            expandFile(Eups, inFile, productList, fileType, outdir=outdir, in_situ=in_situ,
                            svnroot=svnroot, cvsroot=cvsroot)
        elif fileType == "table":
            expandFile(Eups, inFile, productList, fileType, outdir=outdir, in_situ=in_situ,
                            versionRegexp=warnRegexp)
        else:
            raise AssertionError, "Impossible expansion command: %s" % cmd
    elif cmd == "flags":
        try:
            print "EUPS_FLAGS == %s" % (os.environ["EUPS_FLAGS"])
        except KeyError:
            print "You have no EUPS_FLAGS set"
    elif cmd == "flavor":
        print Eups.flavor
    elif cmd == "list":
        current = opts.options.get('-c', False)
        directory = opts.options.get('-d', False)
        tablefile = opts.options.get('-m', False)
        setup = opts.options.get('-s', False)

        productName, versionName = None, None
        if opts.argv:
            productName = opts.argv.pop(0)
        if opts.argv:
            versionName = opts.argv.pop(0)

        listProducts(Eups, productName, versionName,
                     current=current, setup=setup, tablefile=tablefile, directory=directory)
    elif cmd == "path":
        _path = Eups.path
        try:
            if opts.argv:
                a = opts.argv.pop()
                n = int(a)
                if n < 0:
                    n += len(Eups.path)

                _path = [Eups.path[n]]
        except IndexError:
            print >> sys.stderr, "Element %d of EUPS_PATH doesn't exist" % (n)
            sys.exit(1)
        except ValueError:
            print >> sys.stderr, "Unrecognised argument to eups %s: %s" % (cmd, a)
            sys.exit(1)
        
        for p in _path:
            print p
    elif cmd == "pkg-config":
        cflags = opts.options.get("-c", False)
        libs = opts.options.get("-l", False)

        if cflags + libs != 1:
            print >> sys.stderr, "Please specify exactly one desired item of information"

        if cflags:
            desired = "Cflags"
        elif libs:
            desired = "Libs"
        else:
            print >> sys.stderr, "RHL made a mistake; complain"
            sys.exit(1)

        productName = opts.argv.pop(0)
        if opts.argv:
            versionName = opts.argv.pop(0)
        else:
            versionName = None
        #
        # Time to do some real work
        #
        PKG_CONFIG_PATH = os.environ.get("PKG_CONFIG_PATH", "").split(":")
        productList = Eups.listProducts(productName, versionName)
        #
        # Look for the best match
        productDir = None
        if versionName:
            try:
                name, version, db, productDir, isCurrent, isSetup = productList[0]
            except IndexError:
                pass

        if not productDir:              # try setup version
            for name, version, db, dir, isCurrent, isSetup in productList:
                if isSetup:
                    productDir = dir
                    break

        if not productDir:              # try current version
            for name, version, db, dir, isCurrent, isSetup in productList:
                if isCurrent:
                    productDir = dir
                    break

        if productDir:
            PKG_CONFIG_PATH += [os.path.join(productDir, "etc")]
        
        if not PKG_CONFIG_PATH:
            if versionName:
                print >> sys.stderr, "Unable to find %s %s" % (productName, versionName)
            else:
                print >> sys.stderr, "No version of %s is either setup or current" % (productName)
            sys.exit(1)

        pcfile = None
        for dir in PKG_CONFIG_PATH:
            _pcfile = os.path.join(dir, "%s.pc" % productName)

            if os.path.exists(_pcfile):
                pcfile = _pcfile
                break

        if pcfile:
            if Eups.verbose:
                print >> sys.stderr, "Reading %s" % pcfile
            # Time to actually read and process the file.
            symbols = {}
            contents = open(pcfile).readlines()
            #
            # Look for variable definitions
            #
            for line in contents:
                mat = re.search(r"^\s*([^=\s]+)\s*=\s*([^\s]+)", line)
                if mat:
                    symbols[mat.group(1)] = mat.group(2)
            #
            # Expand references to variables in other variable's values
            #
            for k in symbols.keys():
                mat = re.search(r"(?:^|[^$])\${([^\}]+)}", symbols[k])
                if mat:
                    var = mat.group(1)
                    symbols[k] = re.sub(r"(^|[^$])\${([^\}]+)}", r"\1%s" % symbols[var], symbols[k])
            #
            # Look for configuration values
            #
            for line in contents:
                mat = re.search(r"^\s*%s\s*:\s*(.*)" % desired, line, re.IGNORECASE)
                if mat:
                    value = mat.group(1)
                    
                    mat = re.search(r"(?:^|[^$])\${([^\}]+)}", value)
                    if mat:
                        var = mat.group(1)
                        value = re.sub(r"(^|[^$])\${([^\}]+)}", r"\1%s" % symbols[var], value)


                    value = re.sub(r"\$\$", r"$", value)

                    print value
                    break
        else:
            print >> sys.stderr, "I am unable to find a .pc file for %s" % productName
    elif cmd == "remove":
        recursive = opts.options.get('-R', False)
        interactive = (recursive or opts.options.get('-i', False)) and not opts.options.get(noInteractiveFlag)
        noCheck = opts.options.get('-N', False)

        productName = opts.argv.pop(0)
        if opts.argv:
            versionName = opts.argv.pop(0)
        else:
            versionName = None

        Eups.remove(productName, versionName, recursive, checkRecursive=not noCheck, interactive=interactive)
    elif cmd == "setup" or cmd == "unsetup":
        print "Please use the command \"%s\" which modifies your environment" % " ".join([cmd] + opts + argv)
    elif cmd == "undeclare":
        undeclare_current = opts.options.get('-c', False)

        productName, versionName = opts.argv[0:2]

        Eups.undeclare(productName, versionName, undeclare_current=undeclare_current)
    elif cmd == "uses":
        current = opts.options.get('-c', False)
        depth = int(opts.options.get('-d', "9999"))
        showOptional = opts.options.get('-o', False)

        productName = opts.argv.pop(0)
        if opts.argv:
            if current:
                raise RuntimeError, "You may not specify a version and --current"
            versionName = opts.argv.pop(0)
        else:
            versionName = None

        eupsUses(Eups, productName, versionName, depth, showOptional, current)
    else:
        print "Unknown eups command \"%s\"" % cmd

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

def eupsAdmin(Eups, subcmd):
    if not subcmd:
        print >> sys.stderr, helpStr
        sys.exit(1)

    if subcmd == "buildCache":
        Eups.buildCache()
    elif subcmd == "clearCache":
        Eups.clearCache()
    elif subcmd == "listCache":
        Eups.listCache()
    elif subcmd == "clearLocks":
        Eups.clearLocks()
    else:
        print >> sys.stderr, "Unexpected sub-command: %s" % subcmd
        print >> sys.stderr, helpStr
        sys.exit(1)

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

def distrib(Distrib, desire, productName, versionName, manifest=None, current=False):
    #
    # To work
    #
    if desire == "create":
        if Distrib.noeups and not versionName:
            raise RuntimeError, "You must specify a version if you use --noeups"

        eupsDistrib.create(Distrib, productName, versionName, manifest)
        if current:
            eupsDistrib.createCurrent(Distrib, productName, versionName)
    elif desire == "install":
        eupsDistrib.install(Distrib, productName, versionName, manifest)
    elif desire == "list":
        for p, v in eupsDistrib.listProducts(Distrib, productName, versionName, current, manifest):
            print "%-20s %s" % (p, v)
    else:
        raise AssertionError, ("You can't get here (desire == %s); complain to RHL" % desire)

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

def listProducts(Eups, productName=None, versionName=None,
                 current=False, setup=False, tablefile=False, directory=False):

    productNameIsGlob = productName and re.search(r"[\[\]?*]", productName) # is productName actually a glob?

    productList = Eups.listProducts(productName, versionName, current, setup)
    
    for name, version, db, productDir, isCurrent, isSetup in productList:
        info = ""

        if directory or tablefile:
            if Eups.verbose:
                info += "%-10s" % (version)

            if directory:
                if productDir:
                    info += productDir
                else:
                    info += ""
            if tablefile:
                if info:
                    info += "\t"

                try:
                    table = Eups.Product(name, version, eupsPathDirs=db).table

                    if table.file:
                        info += table.file
                    else:
                        info += "none"
                except RuntimeError, e:
                    print >> sys.stderr, e
                    info += "???"
        else:
            if productName and not productNameIsGlob:
                info += "   "
            else:
                info += "%-21s " % (name)
            info += "%-10s" % (version)
            if Eups.verbose:
                info += "%-20s %-55s" % (db, productDir)

            extra = []
            if isCurrent:
                extra += ["Current"]
            if isSetup:
                extra += ["Setup"]
            if extra:
                info += "\t" + " ".join(extra)

        print info

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

def eupsUses(Eups, productName, versionName, depth, showOptional, current):
    #
    # To work
    #
    userList = Eups.uses(productName, versionName, depth)

    fmt = "%-20s %-15s"
    if versionName:                             # we know the product version, so don't print it again
        print fmt % ("product", "version")
    else:
        fmt += " %-15s"
        print fmt % ("product", "version", "%s version" % productName)

    for (p, pv, requestedInfo) in userList:
        requestedVersion, optional, currentRequested = requestedInfo

        if optional and not showOptional:
            continue

        if current and not currentRequested:
            continue

        if versionName:
            str = fmt % (p, pv)
        else:
            str = fmt % (p, pv, requestedVersion)

        if showOptional:
            if optional:
                str += "Optional"

        print str

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

def expandFile(Eups, inFile, productList, fileType=None, outdir=None, in_situ=False, **kwargs):
    """Expand a build or table file"""

    assert fileType
    
    if fileType == "build":
        assert len(productList.keys()) == 1
        
        productName = productList.keys()[0]
        versionName = productList[productName]

        cvsroot = kwargs.get("cvsroot")
        svnroot = kwargs.get("svnroot")
        #
        # Guess the value of PRODUCT
        #
        if productName:
            pass
        else:
            mat = re.search(r"^([^.]+)\.build$", os.path.basename(inFile))
            if mat:
                productName = mat.group(1)
    elif fileType == "table":
        versionRegexp = kwargs.get("versionRegexp")
    else:
        raise RuntimeError, ("Unknown file type: %s" % fileType)
    #
    # Actually open the file and do the work
    #
    backup = None
    if inFile == "-":
        ifd = sys.stdin
    else:
        try:
            if in_situ:
                backup = inFile + ".bak"
                os.rename(inFile, backup)
                ifd = open(backup, "r")
            else:
                ifd = open(inFile)
        except IOError, e:
            if backup and os.path.exists(backup):
                os.rename(backup, inFile)
                os.unlink(backup)

            print >> sys.stderr, "Failed to open file \"%s\" for read" % inFile
            sys.exit(1)

    if outdir:
        outfile = os.path.join(outdir, os.path.basename(inFile))
        if Eups.verbose:
            print "Writing to %s" % outfile

        try:
            ofd = open(outfile, "w")
        except IOError, e:
            print >> sys.stderr, "Failed to open file \"%s\" for write" % outfile
            sys.exit(1)
    elif in_situ:
        try:
            ofd = open(inFile, "w")
        except Exception:
            if backup and os.path.exists(backup):
                os.rename(backup, inFile)
                os.unlink(backup)
    else:
        ofd = sys.stdout
    #
    # Actually do the work
    #
    try:
        if fileType == "build":
            eupsDistribBuilder.expandBuildFile(ofd, ifd, productName, versionName,
                                               Eups.verbose, svnroot=svnroot, cvsroot=cvsroot)
        elif fileType == "table":
            eupsTable.expandTableFile(Eups, ofd, ifd, productList, versionRegexp)
        else:
            raise AssertionError, ("Impossible fileType: %s" % fileType)
    except Exception:
        if backup and os.path.exists(backup):
            os.rename(backup, inFile)
        raise

    if backup and os.path.exists(backup):
        os.unlink(backup)

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

if allowRaise:
    main(cmd, opts)                     # n.b. no try block
else:

    try:
        main(cmd, opts)
    except RuntimeError, e:
        print >> sys.stderr, e
        sys.exit(1)
    except OSError, e:
        print >> sys.stderr, e
        sys.exit(1)

sys.exit(0)
