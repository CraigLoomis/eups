#!/usr/bin/perl
#
# This script calls the appropriate setup/unsetup tasks and update the
# environment variables. It writes it out to a temporary file, which
# can be sourced.
#
# Nikhil Padmanabhan
# Jan 22, 2003 Princeton
#EUPS : A Unix Versioning System
#Copyright (C) 2003 Nikhil Padmanabhan

#    This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
####################


use POSIX;

# The subroutines that actually write out the necessary
# shell commands. These subroutines ideally should take care 
# of the shell determination.

sub sete {
    our $shell;
    our $tmpfile;
    if ($shell eq "sh") {
	my $key = $_[0];
	my $val = $_[1];
	print $tmpfile "export $key=\"$val\"\n";
    }
    if ($shell eq "csh") {
        my $key = $_[0];
        my $val = $_[1];
        print $tmpfile "setenv $key \"$val\"\n";
    }
}

sub unsete {
    our $shell;
    our $tmpfile;
    if ($shell eq "sh") {
        my $key = $_[0];
        print $tmpfile "unset $key\n";
    }
    if ($shell eq "csh") {
        my $key = $_[0];
        print $tmpfile "unsetenv $key\n";
    }

}

sub setshell {
    use File::Basename;
    our $shell = basename($ENV{"SHELL"});

# Do some quick translations
    $shell = "sh" if ($shell eq "bash");
    $shell = "csh" if ($shell eq "tcsh");


    my $retval = 0;
    if ($shell eq "") {
	print STDERR "ERROR : EUPS_SHELL not set\n";
	$retval = -1;

    } elsif (!(($shell eq "sh")||($shell eq "csh"))) {
	print STDERR "ERROR : Unknown shell $shell\n";
	$retval = -1;
    }
    return $retval;
}


# Open the temporary file
our $tmpfile;
do {
    $fn = tmpnam();
} until open $tmpfile, ">$fn";

$eupsdir = $ENV{"EUPS_DIR"};
if ($eupsdir eq "") {
    print STDERR "ERROR: EUPS_DIR not set\n";
    goto CLEAN;
}
require "$eupsdir/bin/eups_setup.pm";
import eups_setup;

$debug = $ENV{"EUPS_DEBUG"};
$debug = 0 if ($debug eq "");
#
# Parse arguments. Many are actually interpreted by eups_setup.pm
#
push(@args, $ARGV[0]); shift; # move desired operation (e.g. "setup") to @args

%longopts = (
	     '--database',	'-z',
	     '--flavor',	'-f',
	     '--help',		'-h',
	     '--root',		'-r',
	     '--version',	'-V',
	     '--verbose',	'-v',
	     );

while ($ARGV[0] =~ /^-/) {
   $ropt = $opt = $ARGV[0]; shift;

   if (defined($longopts{$opt})) {
      $opt = $longopts{$opt};
   }
   
   if ($opt eq "-h") {
      &usage();
      &myexit(0);
   } elsif ($opt eq "-f" || $opt eq "-r" || $opt eq "-z") {
      push(@args, $opt);
      
      if (!defined($ARGV[0])) {
	 warn "You must specify a value with $ropt\n";
	 &myexit(1);
      }
      push(@args, $ARGV[0]);
      shift;
   } elsif ($opt eq "-v") {
      $debug++;
      $ENV{"EUPS_DEBUG"} = $debug;
   } elsif ($opt eq "-V") {
      my($version) = &get_version();
      warn "Version: $version\n";
      &myexit(0);
   } else {			# unknown argument
      &usage();
      &myexit(1);
   }
}

if (!defined($ARGV[0])) {
   warn "Please specify a product\n";
   &usage();
   &myexit(1);
}

@args = (@args, @ARGV);

#Get the shell 
our $shell = $0;
$retval = setshell;
goto CLEAN if ($retval == -1);
print STDERR "eups -- using shell : $shell\n" if ($debug > 1);

# Get the command line
$select = $args[0];
$args[0] = "";
$comm = join " ",@args;
if (!(($select eq "setup")||($select eq "unsetup"))) {
    print STDERR "ERROR: Unknown command \"$select\" to eups_setup (not setup/unsetup)\n";
    goto CLEAN;
}
# Die if EUPS_FLAVOR is not set and -f not used... this is so that
# a major failure mode gets a decent error message.
if (($select eq "setup")&&($ENV{"EUPS_FLAVOR"} eq "")&&(!($comm =~ m/\-f/))) {
    print STDERR "ERROR: No flavor flavor - use -f or set EUPS_FLAVOR\n";
    goto CLEAN;
}

#Get the environment variables
%oldenv = %ENV;
@oldkeys = keys %ENV;

# Call either setup or unsetup

if ($select eq "setup") {
   # First try an unsetup
    $retval = eups_setup($comm,$tmpfile,0);
    if ($retval < 0) {
	eups_unsetup($comm,$tmpfile,1);
	print STDERR "FATAL ERROR : setup failed\n";
	goto CLEAN;
    }
}
if ($select eq "unsetup") {
    $retval = eups_unsetup($comm,$tmpfile,0);
    if ($retval < 0) {
	print STDERR "FATAL ERROR : unsetup failed\n";
	goto CLEAN;
    }
}

#Check to see and update the environment 

@newkeys = keys %ENV;

for ($i=0;$i<@oldkeys;$i++) {
# Is the variable still set?
    if (!($ENV{$oldkeys[$i]})) {
	unsete($oldkeys[$i]);
	next;
    } 
    $val = $ENV{$oldkeys[$i]};
    $oval = $oldenv{$oldkeys[$i]};
    if (!($val eq $oval)) {
	sete($oldkeys[$i],$val);
    }
}

for ($i = 0; $i<@newkeys; $i++) {
    if (!($oldenv{$newkeys[$i]})) {
	sete($newkeys[$i],$ENV{$newkeys[$i]});
    }
}

# Self destruct file
CLEAN:
print $tmpfile "\\rm -f $fn\n";
close $tmpfile;

print "$fn\n";

exit;

###############################################################################
#
# Get version number from cvs
#
sub
get_version()
{
   my($version) = '\$Name: not supported by cvs2svn $';	# version from cvs

   if ($version =~ /^\$Name: not supported by cvs2svn $/) {
      $version = $1;
   } else {
      $version = "(NOCVS)";
   }

   return $version;
}

###############################################################################
#
# Print Help message
#
sub usage
{
   warn <<"EOT";
Usage:
   setup [options] product [version]
Options:
       -h, --help		Print this help message
       -f, --flavor FLAVOR	Use this flavor (default: \$EUPS_FLAVOR)
       -r, --root DIR          	Use DIR as the root directory for this product
       -v, --verbose		Be chattier (repeat for even more chat)
       -V, --version    	Print version number and exit
       -z, --database DB	Use this products database (default: \$PRODUCTS)
EOT
}

###############################################################################

sub myexit
{
   my($exit) = @_;
   print "/dev/null\n";
   exit $exit;
}
