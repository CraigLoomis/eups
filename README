(The following is a text version of the documentation for the 
Perl implementation of UPS, evilups.)

Nikhil Padmanabhan
Princeton, Jan 23rd, 2003 

Note that this package is distributed free of cost, and the user is 
free to update any/all parts of the code.  This is with the implicit
assumption that the original code will be acknowledged.

0. TABLE OF CONTENTS:	
	1. Installing EvilUPS
	2. EvilUPS : Basic Commands
	3. EvilUPS : Environment Variables
	4. EvilUPS : The Database (Version/Table) Files
	5. EvilUPS : Further Notes

1. Installing EvilUPS :

There are two stages to installing EvilUPS - the first is to install the code onto
a computer, and the second is to correctly set it up. 

a) First Time installation :

i)   Use cvs to download this product from Princeton into a temporary directory
     "evilups-temp".
       setenv CVS_RSH ssh
       setenv CVSROOT :pserver:anonymous@spectro.princeton.edu:/usr/local/cvsroot
       cvs -d login
       cvs export -d evilups-temp evilups v0_2
ii)  Set the environment variables EUPS_DIR, PROD_DIR_PREFIX and PRODUCTS.
     EUPS_DIR is the directory to install EvilUPS to, PROD_DIR_PREFIX is the
     top-level directory where products are installed, and PRODUCTS is the 
     UPS database.  Suggested locations are:
       setenv PROD_DIR_PREFIX $HOME/products
       setenv PRODUCTS $PROD_DIR_PREFIX/ups_db
       setenv EUPS_DIR $PROD_DIR_PREFIX/EvilUPS
iii) cd evilups-temp
iv)  Execute "make clean"
v)   Execute "make install"

In addition to creating the directory and copying files, two startup scripts
setups.sh and setups.csh are created (for sh and csh type shells respectively). These
set certain functions/aliases and environment variables.

b) Normal Usage (at login for example) :

If EvilUPS is installed under $EUPS_ROOT, source $EUPS_ROOT/EvilUPS/bin/setups.[c]sh 
depending on your shell. This is _NOT_ essential to do, _if_ you are willing to 
set up all your environment variables by hand.

2. EvilUPS : Basic Commands

EvilUPS implements the following UPS commands:

a) eups_flavor :

Syntax : eups_flavor [-a] <productname>

Returns the version of a product, by parsing the SETUP_<product> environment
variable. The -a switch returns, in addition to the version, the flavour,
a full path to the version file, and the database used.

b) eups_undeclare :

Syntax : eups_undeclare [-f <flavor>] <product> <version>

Undeclares <version> of <product> from the database. Also removes any declarations
of this version from current.chain. The flavour is determined from the environment
variable EUPS_FLAVOR, but -f overrides this. The database used is defined by the 
environment variable PRODUCTS.

NOTE: eups_undeclare is designed to be used with eups_declare. It is NOT compatible
with version files that use the "Group: End:" construct.

c) eups_declare:

Syntax : eups_declare [-f <flavor>] [-c/C] [-m <tablefile>] -r <product root directory> <product> <version>

Declares <version> of <product> into the database defined by $PRODUCTS.
The product root directory is where the product has been installed, and can either
be an absolute pathname or specified relative to $PROD_DIR_PREFIX. The flavour is
defined by $EUPS_FLAVOR, unless the -f option is used. The -c option also declares
this version to be current for the flavour, while the -m option specifies the table
file to be used (either in the database, or in the ups directory of the product).

If you specify -c (or -C), then it leaves the currently declared version alone, and
only updates the current.chain.

d) evilsetup :

Syntax : evilsetup <"setup"/"unsetup"> <product> [<version>] [-f <flavor>] [-z <database>]

Usage : source `evilsetup <"setup"/"unsetup"> <product> [<version>] [-f <flavor>] [-z <database>]`

This is the workhorse routine. It sets up or unsets  <version> of <product>. The PERL
script evilsetup writes the name of a file to STDOUT that contains the necessary
commands to setup/unsetup a product; sourcing this file sets up the necessary
environment. 

IMPORTANT : Since the commands to set environment variables differ across shells,
it is essential that $SHELL reflects the current shell.

Options:

<"setup"/"unsetup"> - Setup/UnSetup?
<product> - The product name
<version> - The version. If not specified, uses current.chain
[-f <flavor>] - The flavour to set up. If not specified, $EUPS_FLAVOR is used.
[-z <database>] - The database to use. If not specified, $PRODUCTS is used.

Note the following :
(i)   unsetup ignores all inputs except the product name.
(ii)  unsetup fails if $SETUP_<product> is not set.
(iii) Both setup and unsetup are currently very verbose (to STDERR). However,	
      if they are unsuccessful, then the last line will start with "FATAL ERROR".
      If not, then the script was successful.

FOR POWER USERS : There is another way to run setup; which bypasses the product
definition (it still however requires that the product database be defined). In
order to do this, use -r <product directory> AND -m <table file> in the setup
command; note that both of these must be used or else the command will not work.


3. EvilUPS : Environment Variables

Required variables -

a) SHELL - This must be set to the shell running. This is true in general, unless
you run a shell script, or change your shell.

b) EUPS_DIR - Where EUPS_DIR is installed.

c) PROD_DIR_PREFIX - The root directory under which all products are installed.

d) PRODUCTS - The path to the UPS database.

Optional Variables -

a) EUPS_FLAVOR - Set to the default flavour.

b) EUPS_DEBUG - This sets the verbosity. Currently, there are two settings: 0 for
quiet, and 1 for verbose.  If the verbosity is turned off, then although it will
tell you when something breaks, it will probably give you very little information.
You will then need to turn verbosity on to find out what is happening.
Note that you can always enable verbosity by using the -v command line option.


4. EvilUPS : The Database

a)
This section briefly describes the structure of the UPS database. The UPS database
consists of a directory $PRODUCTS, with a subdirectory for each declared product.
Each of these product directories contain a series of product definitions, specified
by three types of files.

i) current.chain : There is only one (if any) of these per directory.  The
   current.chain file specifies the current version for a given flavour, and is
   what is used as the default if the version is not specified.

   An example of a current.chain file is in the examples directory.

ii) Version files : There is one of these for every declared version of the
    product, named <version>.version. The file specifies basic information about
    the version of the product, including where it is installed. An example is in
    the examples directory as example.version

iii) Table files : These specify the dependencies of the product. The default name
     for these is <version>.table although a specific name can be specified in the
     version file. An example table file is in the examples directory as example.table.

     Table files use a series of commands to specify the dependencies. These are
     discussed in the next subsection.

     NOTE: See Section 5 for a note on the search algorithm that EvilUPS uses for 
     locating table files.

b) UPS commands :

The following UPS commands are supported by EvilUPS : (<NAME> either specifies an
alias or an environment variable - clear from the context.)

i)    addAlias(<NAME>,<Value>) : Defines a function or an alias.
ii)   envAppend(<NAME>,<Value>,[<delimiter>]) : Appends <Value> to <NAME>.
      The default delimiter is ":".
iii)  envPrepend(<NAME>,<Value>,[<delimiter>]) : Similar to envAppend
iv)   envRemove(<NAME>,<Value>,[<delimiter>]) : Removes <Value> from <NAME>.
      Otherwise similar to envAppend
v)    envSet(<NAME>,<Value>) : Set <NAME> to <Value>
vi)   envUnset(<NAME>) : Unsets <NAME>
vii)  pathAppend, pathPrepend, pathRemove, pathSet - Functionally equivalent to
      the env commands - provided for compatibility
viii) prodDir() : Sets <PRODUCT>_DIR to the directory where the product is installed.
ix)   setupEnv() : Sets SETUP_<PRODUCT> so that product can be unsetup.
x)    setupRequired(<args>) : Run setup with arguments args. Fail if unable to setup.
xi)   setupOptional(<args>) : Same as setupRequired except that it does not fail
      if unable to setup.

c) Variables : The values to these UPS commands can be variables. All environment
   variables can be used as ${<ENV_VARIABLE>}. In addition, the following special
   variables are defined;

i)   ${PRODUCTS} : The database
ii)  ${UPS_PROD_DIR} : Where the product is installed.
iii) ${UPS_PROD_FLAVOR} : The product flavor.
iv)  ${UPS_PROD_NAME} : The product name
v)   ${UPS_PROD_VERSION} : The product version
vi)  ${UPS_UPS_DIR} : The ups directory of the product (distinct from the directory
     in the database - this is often where the table file will be stored).

5. EvilUPS : Further Notes

evilinstall help :: (The following is the documentation for evilinstall,
copied from the header)

#------------------------------------------------------------------------------
# Script to install a version of a code and declare it current.
#
# The version name should either be "cvs" or begin with the letter "c".
# If it is "cvs", then simply check-out the current (untagged) version
#   of the code, build it, copy it into a "cvs" subdirectory, and
#   declare it current.
# If it is an actual tagged version, then cvs-export that version,
#   build it, install it using UPS, and declare it current.
# If the requested version of the code already exists, then simply declare
#   that version current.
#
# If you are installing products with inter-dependencies, be sure to
# install them in the order of those dependencies.  For example, since
# "idlspec2d" depends upon "idlutils", you would install them with:
#   % evilinstall idlutils v4_5_0
#   % setup idlutils
#   % evilinstall idlspec2d v4_5_0
#
# The CVS repository can be specified by setting the $CVSROOT environment
# variable.  If not set, then set to the default CVS repository at Princeton.
#
# If installing the "idlutils" product, then build with "evilmake"
# in that product.  Otherwise, if "idlutils" is setup up, then use "evilmake".
# Otherwise, if "sdsstools" is set up, then use "sdssmake".
# Finally, simply use "make" in any other cases.
#
# This script tries to set-up products using the table file in the /ups
# subdirectory of the product.  If this file does not exist, then a minimal
# version of that file is created.
#
# D. Schlegel & N. Padmanabhan, Princeton, 29 January 2003
#------------------------------------------------------------------------------


a) Locating table files : EvilUPS first checks for a table file in 
$PRODUCTS/<product>/ - if it doesn't find it there, it looks for it in the ups
directory of the product, as specified in the version file.

b) evilinstall : A version of EvilUPS is in etc/

c) Test suite (currently tested on): 
	evilinstall foobar cvs
	Ran frames manually

d) EvilUPS now properly (I believe) deals with flavours ANY and NULL.

